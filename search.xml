<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>VUE是如何渲染SFC的</title>
    <url>/2024/09/28/VUE%E6%98%AF%E5%A6%82%E4%BD%95%E6%B8%B2%E6%9F%93SPA%E7%9A%84/</url>
    <content><![CDATA[<h2 id="涉及到的知识面"><a href="#涉及到的知识面" class="headerlink" title="涉及到的知识面"></a>涉及到的知识面</h2><p>正则表达式，数据劫持，虚拟 DOM</p>
<h2 id="简易流程加虚拟-DOM"><a href="#简易流程加虚拟-DOM" class="headerlink" title="简易流程加虚拟 DOM"></a>简易流程加虚拟 DOM</h2><p>为了可以介绍清楚整个转化流程，我将拿一个简单地 <code>.vue</code> 文件举例子，并把整个渲染流程代码逐个拆分到每个步骤中去。这个例子会涉及响应式和虚拟 DOM。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; content &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            title: &quot;this is title&quot;,</span><br><span class="line">            content: &quot;this is Content&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="SFC转为JS"><a href="#SFC转为JS" class="headerlink" title="SFC转为JS"></a>SFC转为JS</h3><p>由于浏览器只能识别 <code>http | js | css</code>  文件，所以 <code>vite</code> 官方 提供一个<code>@vitejs/plugin-vue</code> 组件，可以把这个插件想象成编译器，把 <code>.vue</code> 文件转化为 <code>.js</code>文件。为了更好的探究实现过程，我决定手写，这时候就涉及到读取vue文件，把内容转为字符串输出。</p>
<p>早期，浏览器是一个沙盒，它不允许我们操作本地文件，通常都是后端处理，前端使用 <code>fetch</code> API 或 <code>XMLHttpRequest</code> 来发送请求到后端拿到数据。浏览器只允许同源的Ajax操作，如果跨域，就必须使用CORS权限。<br>除此之外，还有纯前端操作文件的方法。参考<a class="link"   href="https://blog.csdn.net/xgangzai/article/details/129605068" ># 使用File System Access API让浏览器拥有操作本地文件的能力 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。<br>纯前端方法不是很流行，所以我不做研究。</p>
<p>利用 <code>webpack</code> ，相当于是后端的处理方式，由于 <code>webpack</code> 运行在 <code>Nodejs</code> 上，所以webpack内部在编译的过程帮我们处理了读取文件的步骤，我们只需配置一个loader，参数是从目标文件拿到的字符串信息，返回一个字符串webpack会生成对应的js文件。在loader中编写我们的处理逻辑。</p>
<p>以下手写webpack-loader ，模拟了<code>@vitejs/plugin-vue</code>的编译功能，把vue转化为了js。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> regTemplate = <span class="regexp">/\&lt;template\&gt;(.+?)\&lt;\/template\&gt;/</span></span><br><span class="line"><span class="keyword">const</span> regScript = <span class="regexp">/\&lt;script\&gt;(.+?)\&lt;\/script\&gt;/</span></span><br><span class="line"><span class="keyword">const</span> regFirstSign = <span class="regexp">/(&#123;)/</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">source</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> _source = source.<span class="title function_">replace</span>(<span class="regexp">/[\r\n]/g</span>,<span class="string">&#x27;&#x27;</span>)  </span><br><span class="line">      <span class="keyword">const</span> template = _source.<span class="title function_">match</span>(regTemplate)[<span class="number">1</span>]</span><br><span class="line">      <span class="keyword">const</span> script = _source.<span class="title function_">match</span>(regScript)[<span class="number">1</span>]</span><br><span class="line">      <span class="keyword">const</span> finalScript = script.<span class="title function_">replace</span>(regFirstSign, <span class="string">&#x27;$1 template:&#x27;</span> + <span class="string">&#x27;`&#x27;</span> + template + <span class="string">&#x27;`&#x27;</span> + <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(finalScript)</span><br><span class="line">      <span class="keyword">return</span> finalScript</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//finalScript like this </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; <span class="attr">template</span>:<span class="string">`    &lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;    &lt;p&gt;&#123;&#123; content &#125;&#125;&lt;/p&gt;`</span>,    <span class="title function_">data</span>(<span class="params"></span>) &#123;        <span class="keyword">return</span> &#123;            <span class="attr">title</span>: <span class="string">&quot;this is </span></span><br><span class="line"><span class="string">title&quot;</span>,            <span class="attr">content</span>: <span class="string">&quot;this is Content&quot;</span>,        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure></div>


<h3 id="template模板分析，编译"><a href="#template模板分析，编译" class="headerlink" title="template模板分析，编译"></a>template模板分析，编译</h3><p>template分为标签，属性，内容。</p>
<ul>
<li>标签有可能是原生的html，也有可能是组件</li>
<li>属性也有可能是vue框架属性，自定义属性<br>vue会对这些模板做过滤，生成AST树。</li>
</ul>
<p>首先把文件里的template和data解构出来</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//解构出被loader处理过的App.js</span></span><br><span class="line"><span class="keyword">const</span> &#123;template,<span class="attr">data</span>: generate &#125; = <span class="title class_">App</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data  = <span class="title function_">reactive</span>(<span class="title function_">generate</span>())</span><br></pre></td></tr></table></figure></div>

<p>然后对模板进行分析编译，编译包括匹配每个标签和内容，然后生成虚拟的DOM。</p>
<blockquote>
<p>这里是一个简易版本，只针对原生标签的innerHtml做了分析。这个 innerHtml 也并非表达式。除此之外，也没有 vue 的特殊的事件属性写法</p>
</blockquote>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> regHtml = <span class="regexp">/\&lt;(.+?)\&gt;\&#123;\&#123;(.+?)\&#125;\&#125;\&lt;\/.+?\&gt;/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">compileTemplate</span> = (<span class="params">template,data</span>)=&gt;&#123;</span><br><span class="line">    <span class="comment">//vDOM原来是对象，这里用数组只是为了展示虚拟节点的思想</span></span><br><span class="line">    <span class="keyword">const</span> vDOM = []</span><br><span class="line">    <span class="keyword">const</span> matched = template.<span class="title function_">match</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(regHtml,<span class="string">&quot;ig&quot;</span>))</span><br><span class="line">    matched.<span class="title function_">forEach</span>(<span class="function">(<span class="params">tag,index</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> [,tagName,key] = tag.<span class="title function_">match</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(regHtml,<span class="string">&quot;i&quot;</span>))</span><br><span class="line">        </span><br><span class="line">        vDOM[index] = &#123;</span><br><span class="line">            <span class="attr">tag</span>:tagName,</span><br><span class="line">            <span class="attr">children</span>: data[key.<span class="title function_">trim</span>()]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> vDOM</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


<h3 id="render虚拟DOM"><a href="#render虚拟DOM" class="headerlink" title="render虚拟DOM"></a>render虚拟DOM</h3><p>初次渲染只需要把虚拟DOM渲染到真实DOM上</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">render</span> = (<span class="params">app,template,data</span>)=&gt;&#123;</span><br><span class="line">    state.<span class="property">_vDOM</span> = <span class="title function_">compileTemplate</span>(template,data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> fragment  =  <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>()</span><br><span class="line">    <span class="comment">//只做一层的渲染</span></span><br><span class="line">    state.<span class="property">_vDOM</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">vnode</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;tag,children&#125; = vnode</span><br><span class="line"></span><br><span class="line">        <span class="comment">//并且只做innerText</span></span><br><span class="line">        <span class="keyword">const</span> node = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(tag)</span><br><span class="line">        node.<span class="property">innerText</span> = children</span><br><span class="line"></span><br><span class="line">        fragment.<span class="title function_">appendChild</span>(node)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    app.<span class="title function_">appendChild</span>(fragment)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


<h3 id="数据更新，重新渲染"><a href="#数据更新，重新渲染" class="headerlink" title="数据更新，重新渲染"></a>数据更新，重新渲染</h3><p>当数据更新，我们如何追踪这种变化？es6的proxy给了我们答案，通过一种数据劫持的方案，我们可以检测到数据变化，并且做一些额外的（更新视图）的动作。<br>以下是proxy ，set的handler的实现。<br>当数据变更时，我们会根据新的data重新编译模板，获取新的虚拟DOM，通过比较新老虚拟DOM，获取发生变化的虚拟DOM，并在真实DOM上重新渲染这部分的值。</p>
<blockquote>
<p>这种比较涉及了diff算法，这里没有去实现</p>
</blockquote>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">update</span> = (<span class="params">template,vDOM,data,value</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> newVDOM = <span class="title function_">compileTemplate</span>(template,data)</span><br><span class="line"></span><br><span class="line">    newVDOM.<span class="title function_">forEach</span>( <span class="function">(<span class="params">vnode,index</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(vnode.<span class="property">children</span> !== vDOM[index].<span class="property">children</span>)&#123;</span><br><span class="line">            <span class="title function_">patch</span>(value,index)</span><br><span class="line">            vDOM.<span class="title function_">splice</span>(<span class="number">0</span>, vDOM.<span class="property">length</span>, ...newVDOM); <span class="comment">// 直接用新内容替换原有内容</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">patch</span> = (<span class="params">value,index</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> childNodes = state.<span class="property">_app</span>.<span class="property">children</span></span><br><span class="line">    childNodes[index].<span class="property">innerText</span> = value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createSetter</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">set</span> = (<span class="params">target,key,value,receiver</span>) =&gt;&#123;</span><br><span class="line">        <span class="keyword">const</span> oldValue = target[key]</span><br><span class="line">        <span class="comment">//一旦执行这一句，那么target的值立马会发生变化，也就是说，下面的代码的target会立马变成新的值。所以update的参数将会是更新后的data</span></span><br><span class="line">        <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target,key,value,receiver)</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(target,key))&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;响应式新增&quot;</span>, + value)</span><br><span class="line">            <span class="title function_">update</span>(state.<span class="property">_template</span>,state.<span class="property">_vDOM</span>,state.<span class="property">_data</span>,value)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(value !== oldValue)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;响应式修改&quot;</span>, key + <span class="string">&quot; = &quot;</span> +  value)</span><br><span class="line">                <span class="title function_">update</span>(state.<span class="property">_template</span>,state.<span class="property">_vDOM</span>,state.<span class="property">_data</span>,value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> set</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> get = <span class="title function_">createGetter</span>()</span><br><span class="line"><span class="keyword">const</span> set = <span class="title function_">createSetter</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutableHandler = &#123;</span><br><span class="line">    get,</span><br><span class="line">    set</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="流程小结"><a href="#流程小结" class="headerlink" title="流程小结"></a>流程小结</h3><p> 我们需要拆分一下概念，整个实现涉及到了 vue 的响应式，和虚拟 DOM。</p>
<ul>
<li>响应式，使得开发者不需要手动管理 DOM 的更新，Vue 会根据数据的变化自动重新渲染相关部分，减少了出错的可能性。</li>
<li>而虚拟 DOM ，避免了 DOM 的频繁更新，提高性能。<br>Vue 的整个流程是可以绕过虚拟 DOM 实现的，接下来我将实现一个更加复杂的 vue 渲染 <code>.vue</code> 文件的流程。</li>
</ul>
<h2 id="完整流程"><a href="#完整流程" class="headerlink" title="完整流程"></a>完整流程</h2><p>以上是 vue 的一个简易版本，由于我认识有限，接下来的内容将会不断更新，以便还原整个 vue 文件运行的流程。</p>
<h3 id="Vue-文件转为-Js-文件"><a href="#Vue-文件转为-Js-文件" class="headerlink" title=".Vue 文件转为. Js 文件"></a>.Vue 文件转为. Js 文件</h3><h3 id="CreateApp-入口函数"><a href="#CreateApp-入口函数" class="headerlink" title="CreateApp 入口函数"></a>CreateApp 入口函数</h3><h3 id="函件加载"><a href="#函件加载" class="headerlink" title="函件加载"></a>函件加载</h3><h2 id="虚拟-DOM"><a href="#虚拟-DOM" class="headerlink" title="虚拟 DOM"></a>虚拟 DOM</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a class="link"   href="https://jonny-wei.github.io/blog/vue/vue/vue-observer.html#%E5%A6%82%E4%BD%95%E4%BE%A6%E6%B5%8B%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%98%E5%8C%96" >响应式原理 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://blog.poetries.top/FE-Interview-Questions/principle-docs/comprehensive/07-%E8%99%9A%E6%8B%9FDOM%EF%BC%88%E4%B8%80%EF%BC%89.html#%E4%B8%80%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF-vdom" >什么是虚拟 DOM <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://www.bilibili.com/video/BV1L94y1U73p/?spm_id_from=333.788&vd_source=115cedcdb1996c6483fb453252e441e6" ># JS实现『从工程化到Vue』【上机题】 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://www.bilibili.com/video/BV1mK421v7PH?p=4&vd_source=115cedcdb1996c6483fb453252e441e6" ># 【小野森森】虚拟DOM怎么了？【前端基础】 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <tags>
        <tag>Vue</tag>
        <tag>SFC</tag>
        <tag>渲染原理</tag>
        <tag>前端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/10/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>聊聊前端缓存</title>
    <url>/2024/10/13/%E8%81%8A%E8%81%8A%E5%89%8D%E7%AB%AF%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>前端缓存是一个很大的概念，网上的资料写的都是零零散散的，所以我这里把他们做一个知识串联。</p>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>按照大类来分可以分为为了资源加载优化的缓存和本地数据存储。<br>比如：CDN 缓存，浏览器缓存，HTTP缓存。本地数据存储</p>
<blockquote>
<p><strong>本篇的缓存和本地数据存储是两个不同的概念</strong><br>LocalStorage 并不算缓存，他是前端开发者手动管理的持久性存储，他不参与 HTTP 请求，只在客户端中存储键值对数据，为了存储数据。而浏览器缓存里的本地缓存则是，是浏览器自动管理的资源缓存，为了资源加载优化，保存的是浏览器的静态资源。<br>本地数据存储是用于存储应用程序状态和用户数据的理想选择，而缓存更侧重于提升性能和减少网络请求。</p>
</blockquote>
<h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><ul>
<li>用于存储用户数据，生命周期较长，除非主动清除</li>
<li>使用 <strong>JavaScript API</strong> 操作</li>
</ul>
<h3 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h3><p>localStorage, sessionStorage, cookie, WebSql, indexedDB</p>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><ul>
<li>缓存是由 HTTP 头部（Cache-Control 等）控制，也就是属于 http 缓存</li>
<li>通过缓存策略实现自动管理，</li>
<li>用于存储静态资源和 API 响应，提升页面性能，但生命周期较短。</li>
</ul>
<p>Http 缓存分为强缓存和协商缓存，以下的两个缓存都收到 http 设置的影响。</p>
<h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><p>HTTP 响应头决定了哪些资源应该缓存、缓存多久，以及是否要每次请求都检查资源的更新。浏览器会根据资源的特性和使用场景，自动决定资源是存储在内存缓存（Memory Cache）还是磁盘缓存（Disk Cache）</p>
<p>分为：</p>
<ul>
<li><strong>内存缓存</strong>（Memory Cache）：短时间保存，浏览器关闭后清空。</li>
<li><strong>磁盘缓存</strong>（Disk Cache）：长期保存，浏览器重启后仍可使用。</li>
<li><strong>Service Worker 缓存</strong>：特殊的缓存，供 PWA 使用。</li>
</ul>
<h3 id="CDN-缓存"><a href="#CDN-缓存" class="headerlink" title="CDN 缓存"></a>CDN 缓存</h3><p>网页内容分为静态内容和动态内容，就算是静态内容也不是一定用 <code>CDN</code>。源服务器在分发内容的时候，会在 <code>http</code> 响应头增加 <code>cache-control</code>，告诉 <code>CDN</code> 哪些要缓存，缓存多久。<br>但是动态内容，每次 CDN 服务器都要重新向源服务器拿，那这个就没多大的意义了。但是也有解决方案（省略）。</p>
<p>CDN 负载均衡服务器会监控每个 CDN 服务器的负载情况，来平均分配网络的流量，</p>
<p>CDN 的确能提升性能，但缓存有效性、用户访问分布、缓存策略配置都会影响它的效果。简单来说：流量高且集中的站点：CDN 缓存效果非常明显，能够减少大量源站请求。流量小且分散的站点：CDN 的效果有限，某些情况下，访问速度甚至不如直接从源站获取快。合理配置缓存策略、TTL、以及区域缓存同步对于提升 CDN 效果至关重要。</p>
<h2 id="浏览器缓存命中执行顺序"><a href="#浏览器缓存命中执行顺序" class="headerlink" title="浏览器缓存命中执行顺序"></a>浏览器缓存命中执行顺序</h2><ol>
<li>是否存在内存缓存？<br>└─ 是 → 使用内存缓存<br>└─ 否 → 2. Service Worker 是否可用？<br>└─ 是 → 使用 Service Worker 缓存<br>└─ 否 → 3. 是否存在磁盘缓存？<br>    └─ 是 → 使用磁盘缓存<br>     └─ 否 → 从网络或 CDN 获取资源</li>
</ol>
]]></content>
      <tags>
        <tag>缓存</tag>
        <tag>本地存储</tag>
      </tags>
  </entry>
  <entry>
    <title>首次认识函数式编程</title>
    <url>/2024/10/14/%E9%A6%96%E6%AC%A1%E8%AE%A4%E8%AF%86%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
